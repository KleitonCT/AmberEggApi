# trigger:
# - master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  BuildProjects: '**/*.csproj'
  Testprojects: '**/*[Tt]ests/*.csproj'  
  Version.MajorMinor: 1.0
  Version.Revision: $[counter(variables['Version.MajorMinor'], 0)]
  
steps:
- task: GitflowBranchGate@1
  displayName: 'Gitflow Branch Gate'
  inputs:
    developBranch: desenvolvimento
    hotfixBranchLimit: 5
    hotfixBranchDaysLimit: 30
    releaseBranchLimit: 5
    releaseBranchDaysLimit: 365
    featureBranchLimit: 10
    featureBranchDaysLimit: 90
    hotfixBranchesMustNotHavePendingPullRequests: false
    releaseBranchesMustNotHavePendingPullRequests: false
    releaseMustNotBeBehindMaster: false
    mustNotHaveHotfixAndReleaseBranches: false
    featureBranchesMustNotBeBehindMaster: false
    CurrentFeatureMustNotBeBehindMaster: false
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  continueOnError: true
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      
- task: Assembly-Info-NetCore@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: $(BuildProjects)
    InsertAttributes: false
    FileEncoding: 'auto'
    WriteBOM: false
    PackageId: '$(Build.SourceBranchName)'
    Authors: '$(Build.DefinitionName)'
    Company: '$(Build.DefinitionName)'
    Product: '$(Build.DefinitionName)'
    Description: '$(Build.DefinitionName)'
    Copyright: '$(Build.DefinitionName)'        
    VersionNumber: '$(Build.BuildNumber)'
    FileVersionNumber: '$(Build.BuildNumber)'
    InformationalVersion: '$(Build.BuildNumber)'
    PackageVersion: '$(Build.BuildNumber)'
    LogLevel: 'normal'
    FailOnWarning: false
    DisableTelemetry: false

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud.AmberEggApi'
    organization: 'diegosmorf'
    scannerMode: 'MSBuild'
    projectKey: 'AmberEggApi'
    projectName: 'AmberEggApi'
    extraProperties: |     
     sonar.exclusions=**/obj/**,**/*.dll
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
     sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    projects: $(BuildProjects)
    vstsFeed: 'e515f851-a794-40b2-a603-30214ed962ae/a86b4459-e784-456a-af3b-bd0dec42c1ce'
    verbosityRestore: 'Minimal'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: $(BuildProjects)
    arguments: '--configuration $(BuildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: $(Testprojects)
    arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'

- task: DeleteFiles@1
  displayName: 'Delete files from $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: |
     **/*.pdb
     **/cs
     **/da
     **/de
     **/es
     **/fa
     **/fi
     **/fr
     **/it
     **/nl
     **/pl
     **/pt
     **/ru
     **/sv
     **/zh-cn
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/*WebApi*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) --no-build'
    zipAfterPublish: True
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
